{
  "name": "sidebar",
  "type": "registry:ui",
  "registryDependencies": [
    "button",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/drawer-menu.json",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/use-mobile.json"
  ],
  "files": [
    {
      "path": "ui/sidebar.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { DrawerMenu } from \"@/components/ui/drawer-menu\";\n\nexport const SIDEBAR_STATE_COOKIE = \"sidebar:state\";\n\ntype SidebarContext = {\n  state: \"open\" | \"closed\";\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext>({\n  state: \"open\",\n  open: true,\n  onOpenChange: () => {},\n});\n\nfunction useSidebar() {\n  return React.useContext(SidebarContext);\n}\n\nconst SidebarLayout = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n  }\n>(({ defaultOpen, className, ...props }, ref) => {\n  const [open, setOpen] = React.useState(defaultOpen ?? true);\n\n  const onOpenChange = React.useCallback((open: boolean) => {\n    setOpen(open);\n    document.cookie = `${SIDEBAR_STATE_COOKIE}=${open}; path=/; max-age=${\n      60 * 60 * 24 * 7\n    }`;\n  }, []);\n\n  const state = open ? \"open\" : \"closed\";\n\n  return (\n    <SidebarContext.Provider value={{ state, open, onOpenChange }}>\n      <div\n        ref={ref}\n        data-sidebar={state}\n        style={\n          {\n            \"--sidebar-width\": \"16rem\",\n          } as React.CSSProperties\n        }\n        className={cn(\n          \"flex min-h-screen bg-muted/40 pl-0 transition-all duration-300 ease-in-out data-[sidebar=closed]:pl-0 sm:pl-[--sidebar-width]\",\n          className,\n        )}\n        {...props}\n      />\n    </SidebarContext.Provider>\n  );\n});\nSidebarLayout.displayName = \"SidebarLayout\";\n\nconst SidebarTrigger = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { open, onOpenChange } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-8\", className)}\n      onClick={() => onOpenChange(!open)}\n      {...props}\n    >\n      <PanelLeft className=\"size-4\" />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst Sidebar = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\n  ({ className, children }, ref) => {\n    const isMobile = useIsMobile();\n    const { open, onOpenChange } = useSidebar();\n\n    const sidebar = (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex h-full flex-col border-r border-border/40 bg-background\",\n          className,\n        )}\n      >\n        {children}\n      </div>\n    );\n\n    if (isMobile) {\n      return (\n        <DrawerMenu.Root\n          direction={\"left\"}\n          open={open}\n          onOpenChange={onOpenChange}\n        >\n          <DrawerMenu.Content className=\"w-[260px] overflow-hidden p-0 md:w-[--sidebar-width] [&>button]:hidden\">\n            <DrawerMenu.Description />\n            <DrawerMenu.Title />\n            {sidebar}\n          </DrawerMenu.Content>\n        </DrawerMenu.Root>\n      );\n    }\n\n    return (\n      <aside className=\"fixed inset-y-0 left-0 z-10 hidden w-[--sidebar-width] transition-all duration-300 ease-in-out md:block [[data-sidebar=closed]_&]:left-[calc(var(--sidebar-width)*-1)]\">\n        {sidebar}\n      </aside>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"flex items-center border-b border-border/40 px-4 py-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"flex items-center border-t border-border/40 px-2.5 py-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\"flex flex-1 flex-col gap-5 overflow-auto py-4\", className)}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarItem = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div ref={ref} className={cn(\"grid gap-2 px-2.5\", className)} {...props} />\n  );\n});\nSidebarItem.displayName = \"SidebarItem\";\n\nconst SidebarLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"px-1.5 text-xs font-medium text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarLabel.displayName = \"SidebarLabel\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarItem,\n  SidebarLabel,\n  SidebarLayout,\n  SidebarTrigger,\n  useSidebar,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}