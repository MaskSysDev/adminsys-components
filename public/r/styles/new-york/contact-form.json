{
  "name": "contact-form",
  "type": "registry:block",
  "registryDependencies": [
    "form",
    "input",
    "textarea",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/alert.json"
  ],
  "files": [
    {
      "path": "block/components/layout/form/contact-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport { ContactFormValues, contactSchema } from \"@/lib/validation/contact\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport const ContactForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const contactForm = useForm<ContactFormValues>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n\n  function onContactFormSubmit(data: ContactFormValues) {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Message sent!\",\n        description: `Thank ${data.name} you for contacting us. We'll get back to you soon.`,\n      });\n      contactForm.reset();\n      setSuccess(\"Success\");\n    });\n  }\n\n  return (\n    <Form {...contactForm}>\n      <form\n        onSubmit={contactForm.handleSubmit(onContactFormSubmit)}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-4\">\n          <FormField\n            control={contactForm.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter your name\" {...field} />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={contactForm.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Email</FormLabel>\n                <FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={contactForm.control}\n            name=\"message\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Message</FormLabel>\n                <FormControl>\n                  <Textarea\n                    placeholder=\"Enter your message\"\n                    className=\"resize-none\"\n                    {...field}\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n        </div>\n        <AlertError message={error} />\n        <AlertSuccess message={success} />\n        <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n          Send Message\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/layout/form/contact-form.tsx"
    },
    {
      "path": "block/lib/validation/contact.ts",
      "content": "import * as z from \"zod\";\n\nexport const contactSchema = z.object({\n  name: z.string().min(2, {\n    message: \"Name must be at least 2 characters.\",\n  }),\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  message: z.string().min(10, {\n    message: \"Message must be at least 10 characters.\",\n  }),\n});\n\nexport type ContactFormValues = z.infer<typeof contactSchema>;\n",
      "type": "registry:component",
      "target": "lib/validation/contact.ts"
    }
  ]
}