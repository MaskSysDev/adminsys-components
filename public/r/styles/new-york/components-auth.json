{
  "name": "components-auth",
  "type": "registry:block",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "alert",
    "avatar",
    "button",
    "card",
    "dropdown-menu",
    "form",
    "input",
    "switch",
    "tabs",
    "toast",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/logo-icon.json",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/logo-theme.json",
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/password-input.json"
  ],
  "files": [
    {
      "path": "block/components/auth/card/card-user-profile.tsx",
      "content": "import { User } from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\n\nexport default function CardUserProfile() {\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"p-0\">\n        <div className=\"h-48 rounded-t-lg bg-[radial-gradient(ellipse_at_bottom,_var(--tw-gradient-stops))] from-primary/10 via-primary/0 to-background\" />\n      </CardHeader>\n      <CardContent className=\"relative px-4 pb-8 pt-16 sm:px-6 lg:px-8\">\n        <Avatar className=\"absolute -top-16 left-1/2 size-32 -translate-x-1/2  shadow-md\">\n          <AvatarImage\n            src=\"/assets/images/avatar/avatar.jpg\"\n            alt=\"User profile picture\"\n          />\n          <AvatarFallback>\n            <User className=\"size-20\" />\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold\">User 01</h2>\n          <p className=\"text-muted-foreground\">user01@email.com</p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/auth/card/card-user-profile.tsx"
    },
    {
      "path": "block/components/auth/dropdown/dropdown-user.tsx",
      "content": "import Link from \"next/link\";\n\nimport { LogOut, User } from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport const DropdownUser = () => {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n          <Avatar className=\"size-9\">\n            <AvatarImage\n              src=\"/assets/images/avatar/avatar.jpg\"\n              alt=\"Avatar Image\"\n            />\n            <AvatarFallback>\n              <User className=\"size-6\" />\n            </AvatarFallback>\n          </Avatar>\n          <span className=\"sr-only\">User Menu</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        <DropdownMenuLabel className=\"p-0 font-normal\">\n          <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm transition-all\">\n            <Avatar className=\"size-7 rounded-md\">\n              <AvatarImage\n                src=\"/assets/images/avatar/avatar.jpg\"\n                alt=\"Avatar User\"\n              />\n              <AvatarFallback>\n                <User className=\"size-6\" />\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"grid flex-1\">\n              <div className=\"font-medium\">User 01</div>\n              <div className=\"overflow-hidden text-xs text-muted-foreground\">\n                <div className=\"line-clamp-1\">user01@email.com</div>\n              </div>\n            </div>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem asChild>\n          <Link href=\"/settings/account\">Account</Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem asChild>\n          <Link href=\"/admin/dashboard\">Admin Dashboard</Link>\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem className=\"gap-2\">\n          <LogOut className=\"size-4 text-muted-foreground\" />\n          Logout\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/dropdown/dropdown-user.tsx"
    },
    {
      "path": "block/components/auth/form/account-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport { AccountFormValues, accountSchema } from \"@/lib/validation/auth\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\nimport { Switch } from \"@/components/ui/switch\";\n\nexport const AccountForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const accountForm = useForm<AccountFormValues>({\n    resolver: zodResolver(accountSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      role: \"USER\",\n      password: \"\",\n      newPassword: \"\",\n      isTwoFactorEnabled: undefined,\n    },\n  });\n\n  function onAccountSubmit(values: AccountFormValues) {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Updated Successful\",\n        description: `Account updated for ${values.name} (${values.email})`,\n      });\n      accountForm.reset();\n      setSuccess(\"Success\");\n    });\n  }\n\n  return (\n    <Form {...accountForm}>\n      <form\n        className=\"space-y-6\"\n        onSubmit={accountForm.handleSubmit(onAccountSubmit)}\n      >\n        <div className=\"space-y-4\">\n          <FormField\n            control={accountForm.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">\n                  Name: <span className=\"text-red-600\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"Enter your name\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={accountForm.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">\n                  Email: <span className=\"text-red-600\">*</span>\n                </FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"Enter your email\"\n                    type=\"email\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={accountForm.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"******\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={accountForm.control}\n            name=\"newPassword\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">New Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    {...field}\n                    placeholder=\"******\"\n                    disabled={isPending}\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={accountForm.control}\n            name=\"isTwoFactorEnabled\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-foreground\">\n                    Two Factor Authentication\n                  </FormLabel>\n                  <FormDescription>\n                    Enable two factor authentication for your account\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Switch\n                    className=\"data-[state=checked]:bg-green-600\"\n                    disabled={isPending}\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n        <Button disabled={isPending} type=\"submit\">\n          Update Account\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/account-form.tsx"
    },
    {
      "path": "block/components/auth/form/forgot-password-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport {\n  ForgotPasswordFormValues,\n  forgotPasswordSchema,\n} from \"@/lib/validation/auth\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\nexport const ForgotPasswordForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const forgotPasswordForm = useForm<ForgotPasswordFormValues>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  function onForgotPasswordSubmit(values: ForgotPasswordFormValues) {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Forgot Password\",\n        description: `Signed in as ${values.email}`,\n      });\n      forgotPasswordForm.reset();\n      setSuccess(\"Success\");\n    });\n  }\n\n  return (\n    <Form {...forgotPasswordForm}>\n      <form\n        onSubmit={forgotPasswordForm.handleSubmit(onForgotPasswordSubmit)}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-4\">\n          <FormField\n            control={forgotPasswordForm.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Email</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"Enter your email\"\n                    type=\"email\"\n                    autoFocus\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n        </div>\n        <AlertError message={error} />\n        <AlertSuccess message={success} />\n        <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n          Send reset email\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/forgot-password-form.tsx"
    },
    {
      "path": "block/components/auth/form/form-auth.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\n\nimport { SignInForm } from \"@/components/auth/form/sign-in-form\";\nimport { SignUpForm } from \"@/components/auth/form/sign-up-form\";\nimport { CardAuthWrapper } from \"@/components/auth/wrapper/card-auth-wrapper\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport const FormAuth = () => {\n  const [activeTab, setActiveTab] = useState(\"sign-in\");\n\n  return (\n    <CardAuthWrapper\n      headerLabel=\"Welcome\"\n      headerDescription=\"Sign in to your account or create a new one\"\n      showSocial\n      terms\n    >\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"sign-in\">Sign In</TabsTrigger>\n          <TabsTrigger value=\"sign-up\">Sign Up</TabsTrigger>\n        </TabsList>\n        <TabsContent value=\"sign-in\">\n          <SignInForm />\n        </TabsContent>\n        <TabsContent value=\"sign-up\">\n          <SignUpForm />\n        </TabsContent>\n      </Tabs>\n    </CardAuthWrapper>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/form-auth.tsx"
    },
    {
      "path": "block/components/auth/form/new-verification-form.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useState } from \"react\";\n\nimport { useSearchParams } from \"next/navigation\";\n\nimport { LoaderCircle } from \"lucide-react\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nexport const NewVerificationForm = () => {\n  const [error, setError] = useState<string | undefined>();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [success, setSuccess] = useState<string | undefined>();\n\n  const searchParams = useSearchParams();\n\n  const token = searchParams.get(\"token\");\n\n  const onNewVerificationSubmit = useCallback(() => {\n    if (success || error) return;\n\n    if (!token) {\n      setError(\"Missing token!\");\n      return;\n    }\n  }, [token, success, error]);\n\n  useEffect(() => {\n    onNewVerificationSubmit();\n  }, [onNewVerificationSubmit]);\n\n  return (\n    <div className=\"flex w-full items-center justify-center\">\n      {!success && !error && <LoaderCircle className=\"size-5 animate-spin\" />}\n      <AlertSuccess message={success} />\n      {!success && <AlertError message={error} />}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/new-verification-form.tsx"
    },
    {
      "path": "block/components/auth/form/reset-password-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport {\n  ResetPasswordFormValues,\n  resetPasswordSchema,\n} from \"@/lib/validation/auth\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\n\nexport const ResetPasswordForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const resetPasswordForm = useForm<ResetPasswordFormValues>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n    },\n  });\n\n  const onResetPasswordSubmit = (values: ResetPasswordFormValues) => {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Reset Password Successful\",\n        description: `Signed in as ${values.password}`,\n      });\n      setSuccess(\"Success\");\n    });\n  };\n\n  return (\n    <Form {...resetPasswordForm}>\n      <form\n        onSubmit={resetPasswordForm.handleSubmit(onResetPasswordSubmit)}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-4\">\n          <FormField\n            control={resetPasswordForm.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"******\"\n                    autoFocus\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n        </div>\n        <AlertError message={error} />\n        <AlertSuccess message={success} />\n        <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n          Reset password\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/reset-password-form.tsx"
    },
    {
      "path": "block/components/auth/form/sign-in-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Link from \"next/link\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport { cn } from \"@/lib/utils\";\nimport { SignInFormValues, signInSchema } from \"@/lib/validation/auth\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nimport { Button, buttonVariants } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\n\nexport const SignInForm = () => {\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const signInForm = useForm<SignInFormValues>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  function onSignInSubmit(values: SignInFormValues) {\n    setShowTwoFactor(false);\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Sign In Successful\",\n        description: `Signed in as ${values.email}`,\n      });\n      signInForm.reset();\n      setSuccess(\"Success\");\n    });\n  }\n\n  return (\n    <Form {...signInForm}>\n      <form\n        onSubmit={signInForm.handleSubmit(onSignInSubmit)}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-4\">\n          {showTwoFactor && (\n            <FormField\n              control={signInForm.control}\n              name=\"code\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-foreground\">\n                    Two Factor Code\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      disabled={isPending}\n                      placeholder=\"123456\"\n                    />\n                  </FormControl>\n                  <FormMessage className=\"text-red-600\" />\n                </FormItem>\n              )}\n            />\n          )}\n          {!showTwoFactor && (\n            <>\n              <FormField\n                control={signInForm.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-foreground\">Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        disabled={isPending}\n                        placeholder=\"Enter your email\"\n                        type=\"email\"\n                        autoFocus\n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-red-600\" />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={signInForm.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <div className=\"flex items-center\">\n                      <FormLabel className=\"text-foreground\">\n                        Password\n                      </FormLabel>\n                      <Link\n                        href=\"/auth/forgot-password\"\n                        className={cn(\n                          buttonVariants({\n                            variant: \"link\",\n                            size: \"sm\",\n                            className: \"ml-auto h-auto p-0 font-normal\",\n                          }),\n                        )}\n                      >\n                        Forgot password?\n                      </Link>\n                    </div>\n                    <FormControl>\n                      <PasswordInput\n                        {...field}\n                        disabled={isPending}\n                        placeholder=\"******\"\n                      />\n                    </FormControl>\n                    <FormMessage className=\"text-red-600\" />\n                  </FormItem>\n                )}\n              />\n            </>\n          )}\n        </div>\n        <AlertError message={error} />\n        <AlertSuccess message={success} />\n        <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n          {showTwoFactor ? \"Confirm\" : \"Login\"}\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/sign-in-form.tsx"
    },
    {
      "path": "block/components/auth/form/sign-up-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useTransition } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\nimport { toast } from \"@/hooks/use-toast\";\nimport { SignUpFormValues, signUpSchema } from \"@/lib/validation/auth\";\n\nimport { AlertError } from \"@/components/layout/alert/alert-error\";\nimport { AlertSuccess } from \"@/components/layout/alert/alert-success\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { PasswordInput } from \"@/components/ui/password-input\";\n\nexport const SignUpForm = () => {\n  const [error, setError] = useState<string | undefined>(\"\");\n  const [success, setSuccess] = useState<string | undefined>(\"\");\n  const [isPending, startTransition] = useTransition();\n\n  const signUpForm = useForm<SignUpFormValues>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  function onSignUpSubmit(values: SignUpFormValues) {\n    setError(\"\");\n    setSuccess(\"\");\n\n    startTransition(() => {\n      toast({\n        title: \"Sign Up Successful\",\n        description: `Account created for ${values.name} (${values.email})`,\n      });\n      signUpForm.reset();\n      setSuccess(\"Success\");\n    });\n  }\n\n  return (\n    <Form {...signUpForm}>\n      <form\n        onSubmit={signUpForm.handleSubmit(onSignUpSubmit)}\n        className=\"space-y-6\"\n      >\n        <div className=\"space-y-4\">\n          <FormField\n            control={signUpForm.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Name</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"Enter your name\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={signUpForm.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Email</FormLabel>\n                <FormControl>\n                  <Input\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"Enter your email\"\n                    type=\"email\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={signUpForm.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel className=\"text-foreground\">Password</FormLabel>\n                <FormControl>\n                  <PasswordInput\n                    {...field}\n                    disabled={isPending}\n                    placeholder=\"******\"\n                  />\n                </FormControl>\n                <FormMessage className=\"text-red-600\" />\n              </FormItem>\n            )}\n          />\n        </div>\n        <AlertError message={error} />\n        <AlertSuccess message={success} />\n        <Button disabled={isPending} type=\"submit\" className=\"w-full\">\n          Create an account\n        </Button>\n      </form>\n    </Form>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/sign-up-form.tsx"
    },
    {
      "path": "block/components/auth/form/social-login.tsx",
      "content": "\"use client\";\n\nimport { toast } from \"@/hooks/use-toast\";\n\nimport { Icon } from \"@/components/layout/icon/icon\";\n\nimport { Button } from \"@/components/ui/button\";\n\nexport const SocialLogin = () => {\n  const onClick = (provider: \"google\" | \"github\") => {\n    toast({\n      title: \"Sign In Successful\",\n      description: `Signed in as ${provider}`,\n    });\n  };\n\n  return (\n    <div className=\"flex w-full items-center gap-x-2\">\n      <Button\n        size=\"lg\"\n        className=\"w-full bg-background\"\n        variant=\"outline\"\n        onClick={() => onClick(\"google\")}\n      >\n        <Icon.Google className=\"size-5\" />\n      </Button>\n      <Button\n        size=\"lg\"\n        className=\"w-full bg-background\"\n        variant=\"outline\"\n        onClick={() => onClick(\"github\")}\n      >\n        <Icon.Github className=\"size-5\" />\n      </Button>\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/form/social-login.tsx"
    },
    {
      "path": "block/components/auth/sidebar/sidebar-settings.tsx",
      "content": "\"use client\";\n\nimport { NavItemProps } from \"@/types/sidebar\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { SidebarNavItem } from \"@/components/layout/sidebar/inc/sidebar-nav-item\";\n\ninterface SidebarNavProps extends React.HTMLAttributes<HTMLElement> {\n  items: NavItemProps[];\n}\n\nexport function SidebarSettings({\n  className,\n  items,\n  ...props\n}: SidebarNavProps) {\n  return (\n    <nav\n      className={cn(\n        \"flex space-x-2 lg:flex-col lg:space-x-0 lg:space-y-1\",\n        className,\n      )}\n      {...props}\n    >\n      {items.map((subitem) => (\n        <SidebarNavItem key={subitem.href} item={subitem} />\n      ))}\n    </nav>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/auth/sidebar/sidebar-settings.tsx"
    },
    {
      "path": "block/components/layout/sidebar/inc/sidebar-nav-item.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\n\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\n\nimport { ChevronLeft } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Button } from \"@/components/ui/button\";\n\nexport type NavProps = {\n  label: string;\n  href: string;\n  path: string;\n};\n\nexport type NavItemProps = {\n  label: string;\n  href: string;\n  path: string;\n  items: NavProps[];\n};\n\nexport const SidebarNavItem = ({\n  item,\n  className,\n}: {\n  item: NavItemProps;\n  className?: string;\n}) => {\n  const pathname = usePathname();\n\n  const isActive = (href: string) => {\n    return pathname === href || pathname.startsWith(`${href}/`);\n  };\n\n  const isActiveSubmenu = pathname.includes(item.path);\n\n  const [isOpen, setIsOpen] = useState(isActiveSubmenu);\n  const hasSubItems = item.items && item.items.length > 0;\n\n  return (\n    <div id=\"sidebar-nav-item\" className=\"group\">\n      <Button\n        variant=\"ghost\"\n        className={cn(\n          \"w-full justify-start text-base text-muted-foreground hover:bg-primary/5\",\n          {\n            \"bg-primary/5 text-primary\": isActiveSubmenu && isActive(item.href),\n            \"rounded-b-none bg-primary/5 \": hasSubItems && isOpen,\n          },\n          className,\n        )}\n        onClick={() => {\n          if (hasSubItems) {\n            setIsOpen(!isOpen);\n          }\n        }}\n        asChild={!hasSubItems}\n      >\n        {hasSubItems ? (\n          <>\n            {item.label}\n            <ChevronLeft\n              className={cn(\n                \"ml-auto size-4 transition-transform\",\n                isOpen ? \"-rotate-90\" : \"\",\n              )}\n            />\n          </>\n        ) : (\n          <Link href={item.href}>{item.label}</Link>\n        )}\n      </Button>\n      {isOpen && hasSubItems && (\n        <div className=\"space-y-1 rounded-b-md bg-primary/5\">\n          {item.items!.map((subItem, index) => (\n            <Button\n              key={index}\n              variant=\"ghost\"\n              className={cn(\n                \"w-full justify-start pl-8 text-base text-muted-foreground hover:bg-transparent\",\n                isActive(subItem.href) &&\n                  subItem.href === pathname &&\n                  \"text-primary\",\n              )}\n              asChild\n            >\n              <Link href={subItem.href}>{subItem.label}</Link>\n            </Button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/layout/sidebar/inc/sidebar-nav-item.tsx"
    },
    {
      "path": "block/auth-pages/types/sidebar.ts",
      "content": "export type NavItemProps = {\n  label: string;\n  href: string;\n  path: string;\n  items: NavProps[];\n};\n\nexport type NavProps = {\n  label: string;\n  href: string;\n  path: string;\n};\n",
      "type": "registry:component",
      "target": "types/sidebar.ts"
    },
    {
      "path": "block/components/auth/wrapper/card-auth-wrapper.tsx",
      "content": "\"use client\";\n\nimport Link from \"next/link\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { SocialLogin } from \"@/components/auth/form/social-login\";\nimport { buttonVariants } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\n\ninterface CardWrapperProps {\n  children: React.ReactNode;\n  headerLabel?: string;\n  headerDescription?: string;\n  showSocial?: boolean;\n  className?: string;\n  terms?: boolean;\n}\n\nexport const CardAuthWrapper = ({\n  children,\n  headerLabel,\n  headerDescription,\n  showSocial,\n  className,\n  terms,\n}: CardWrapperProps) => {\n  return (\n    <Card className={cn(\"mx-auto w-full max-w-lg overflow-hidden\", className)}>\n      <CardHeader>\n        {headerLabel && (\n          <CardTitle className=\"text-center text-2xl font-bold\">\n            {headerLabel}\n          </CardTitle>\n        )}\n        {headerDescription && (\n          <CardDescription className=\"text-center\">\n            {headerDescription}\n          </CardDescription>\n        )}\n      </CardHeader>\n      <CardContent>{children}</CardContent>\n      {showSocial && (\n        <div>\n          <div className=\"flex items-center p-6 before:mt-0.5 before:flex-1 before:border-t before:border-muted after:mt-0.5 after:flex-1 after:border-t after:border-muted\">\n            <p className=\"mx-4 mb-0 text-center text-sm text-muted-foreground\">\n              or continue with\n            </p>\n          </div>\n          <CardFooter className=\"border-t-0 bg-card\">\n            <SocialLogin />\n          </CardFooter>\n        </div>\n      )}\n      <CardFooter className=\"flex flex-col flex-wrap items-center gap-4 border-t-0 bg-card\">\n        <div className=\"block w-full space-y-8\">\n          {terms && (\n            <p className=\" text-center text-sm text-muted-foreground\">\n              By signing in, you agree to our{\" \"}\n              <Link\n                href=\"/terms\"\n                className={cn(\n                  buttonVariants({\n                    size: \"sm\",\n                    variant: \"link\",\n                    className: \"p-0\",\n                  }),\n                )}\n              >\n                Terms of Service\n              </Link>{\" \"}\n              and{\" \"}\n              <Link\n                href=\"/privacy-policy\"\n                className={cn(\n                  buttonVariants({\n                    size: \"sm\",\n                    variant: \"link\",\n                    className: \"p-0\",\n                  }),\n                )}\n              >\n                Privacy Policy\n              </Link>\n              .\n            </p>\n          )}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/auth/wrapper/card-auth-wrapper.tsx"
    },
    {
      "path": "block/components/layout/alert/alert-error.tsx",
      "content": "import { TriangleAlert } from \"lucide-react\";\n\nimport { Alert, AlertTitle } from \"@/components/ui/alert\";\n\ninterface AlertErrorProps {\n  message?: string;\n}\n\nexport const AlertError = ({ message }: AlertErrorProps) => {\n  if (!message) return null;\n\n  return (\n    <Alert className=\"border-0 bg-red-600/20 text-red-600\">\n      <AlertTitle className=\"flex items-center gap-2\">\n        <TriangleAlert className=\"size-6\" />\n        {message}\n      </AlertTitle>\n    </Alert>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/layout/alert/alert-error.tsx"
    },
    {
      "path": "block/components/layout/alert/alert-success.tsx",
      "content": "import { Check } from \"lucide-react\";\n\nimport { Alert, AlertTitle } from \"@/components/ui/alert\";\n\ninterface AlertSuccessProps {\n  message?: string;\n}\n\nexport const AlertSuccess = ({ message }: AlertSuccessProps) => {\n  if (!message) return null;\n\n  return (\n    <Alert className=\"border-0 bg-green-600/20 text-green-600\">\n      <AlertTitle className=\"flex items-center gap-2\">\n        <Check className=\"size-6\" />\n        {message}\n      </AlertTitle>\n    </Alert>\n  );\n};\n",
      "type": "registry:component",
      "target": "components/layout/alert/alert-success.tsx"
    },
    {
      "path": "block/components/layout/icon/icon.tsx",
      "content": "import { LogoIcon } from \"@/components/layout/logo/logo-icon\";\nimport { LogoTheme } from \"@/components/layout/logo/logo-theme\";\n\ntype IconsProps = React.HTMLAttributes<SVGSVGElement>;\n\nexport const Icon = {\n  Logo: (props: IconsProps) => <LogoTheme {...props} />,\n  LogoIcon: (props: IconsProps) => <LogoIcon {...props} />,\n  Google: (props: IconsProps) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"0.98em\"\n      height=\"1em\"\n      viewBox=\"0 0 256 262\"\n    >\n      <path\n        fill=\"#4285f4\"\n        d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622l38.755 30.023l2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\"\n      />\n      <path\n        fill=\"#34a853\"\n        d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055c-34.523 0-63.824-22.773-74.269-54.25l-1.531.13l-40.298 31.187l-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\"\n      />\n      <path\n        fill=\"#fbbc05\"\n        d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82c0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602z\"\n      />\n      <path\n        fill=\"#eb4335\"\n        d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0C79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\"\n      />\n    </svg>\n  ),\n  Github: (props: IconsProps) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"lucide lucide-github\"\n    >\n      <path d=\"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4\" />\n      <path d=\"M9 18c-4.51 2-5-2-7-2\" />\n    </svg>\n  ),\n  Facebook: (props: IconsProps) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"lucide lucide-facebook\"\n    >\n      <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\" />\n    </svg>\n  ),\n  Instagram: (props: IconsProps) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"lucide lucide-instagram\"\n    >\n      <rect width=\"20\" height=\"20\" x=\"2\" y=\"2\" rx=\"5\" ry=\"5\" />\n      <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\" />\n      <line x1=\"17.5\" x2=\"17.51\" y1=\"6.5\" y2=\"6.5\" />\n    </svg>\n  ),\n  Youtube: (props: IconsProps) => (\n    <svg\n      {...props}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      className=\"lucide lucide-youtube\"\n    >\n      <path d=\"M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17\" />\n      <path d=\"m10 15 5-3-5-3z\" />\n    </svg>\n  ),\n};\n",
      "type": "registry:component",
      "target": "components/layout/icon/icon.tsx"
    },
    {
      "path": "block/lib/validation/auth.ts",
      "content": "import * as z from \"zod\";\n\nexport const signUpSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: \"Name must be at least 2 characters long\" }),\n  email: z.string().email({ message: \"Invalid email address\" }),\n  password: z\n    .string()\n    .min(6, { message: \"Password must be at least 6 characters long\" }),\n});\n\nexport type SignUpFormValues = z.infer<typeof signUpSchema>;\n\nexport const signInSchema = z.object({\n  email: z.string().email({ message: \"Invalid email address\" }),\n  password: z\n    .string()\n    .min(6, { message: \"Password must be at least 6 characters long\" }),\n  code: z.optional(z.string()),\n});\n\nexport type SignInFormValues = z.infer<typeof signInSchema>;\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email({\n    message: \"Email is required\",\n  }),\n});\n\nexport type ForgotPasswordFormValues = z.infer<typeof forgotPasswordSchema>;\n\nexport const resetPasswordSchema = z.object({\n  password: z\n    .string()\n    .min(6, { message: \"Password must be at least 6 characters long\" }),\n});\n\nexport type ResetPasswordFormValues = z.infer<typeof resetPasswordSchema>;\n\nexport const accountSchema = z\n  .object({\n    name: z.string().min(1, {\n      message: \"Name is required\",\n    }),\n    isTwoFactorEnabled: z.optional(z.boolean()),\n    role: z.enum([\"ADMIN\", \"USER\"]),\n    email: z.optional(z.string().email()),\n    password: z.optional(z.string().min(6)),\n    newPassword: z.optional(z.string().min(6)),\n  })\n  .refine(\n    (data) => {\n      if (data.password && !data.newPassword) {\n        return false;\n      }\n\n      return true;\n    },\n    {\n      message: \"New password is required!\",\n      path: [\"newPassword\"],\n    },\n  )\n  .refine(\n    (data) => {\n      if (data.newPassword && !data.password) {\n        return false;\n      }\n\n      return true;\n    },\n    {\n      message: \"Password is required!\",\n      path: [\"password\"],\n    },\n  );\n\nexport type AccountFormValues = z.infer<typeof accountSchema>;\n",
      "type": "registry:component",
      "target": "lib/validation/auth.ts"
    }
  ]
}