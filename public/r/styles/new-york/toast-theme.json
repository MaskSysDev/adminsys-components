{
  "name": "toast-theme",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-toast",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://raw.githubusercontent.com/MaskSysDev/adminsys-components/refs/heads/main/public/r/styles/default/use-toast-theme.json"
  ],
  "files": [
    {
      "path": "ui/toast-theme.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst ToastThemeProvider = ToastPrimitives.Provider;\n\nconst ToastThemeViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastThemeViewport.displayName = ToastPrimitives.Viewport.displayName;\n\nconst toastThemeVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        /* Color */\n        primary: \"group border-primary bg-primary text-primary-foreground\",\n        secondary:\n          \"group border-secondary bg-secondary text-secondary-foreground\",\n        muted: \"group border-muted bg-muted text-muted-foreground\",\n        accent: \"group border-accent bg-accent text-accent-foreground\",\n\n        /* Color System */\n        info: \"group border-blue-700 bg-blue-700 text-blue-50\",\n        positive: \"group border-green-700 bg-green-700 text-green-50\",\n        negative: \"group border-red-700 bg-red-700 text-red-50\",\n        warning: \"group border-yellow-700 bg-yellow-700 text-yellow-50\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst ToastTheme = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastThemeVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastThemeVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nToastTheme.displayName = ToastPrimitives.Root.displayName;\n\nconst ToastThemeAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className,\n    )}\n    {...props}\n  />\n));\nToastThemeAction.displayName = ToastPrimitives.Action.displayName;\n\nconst ToastThemeClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-700\",\n      className,\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"size-4\" />\n  </ToastPrimitives.Close>\n));\nToastThemeClose.displayName = ToastPrimitives.Close.displayName;\n\nconst ToastThemeTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n));\nToastThemeTitle.displayName = ToastPrimitives.Title.displayName;\n\nconst ToastThemeDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n));\nToastThemeDescription.displayName = ToastPrimitives.Description.displayName;\n\ntype ToastThemeProps = React.ComponentPropsWithoutRef<typeof ToastTheme>;\n\ntype ToastThemeActionElement = React.ReactElement<typeof ToastThemeAction>;\n\nexport {\n  ToastTheme,\n  ToastThemeAction,\n  ToastThemeClose,\n  ToastThemeDescription,\n  ToastThemeProvider,\n  ToastThemeTitle,\n  toastThemeVariants,\n  ToastThemeViewport,\n  type ToastThemeActionElement,\n  type ToastThemeProps,\n};\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toaster-theme.tsx",
      "content": "\"use client\";\n\nimport { useToastTheme } from \"@/hooks/use-toast-theme\";\n\nimport {\n  ToastTheme,\n  ToastThemeClose,\n  ToastThemeDescription,\n  ToastThemeProvider,\n  ToastThemeTitle,\n  ToastThemeViewport,\n} from \"@/components/ui/toast-theme\";\n\nexport function ToasterTheme() {\n  const { toasts } = useToastTheme();\n\n  return (\n    <ToastThemeProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <ToastTheme key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastThemeTitle>{title}</ToastThemeTitle>}\n              {description && (\n                <ToastThemeDescription>{description}</ToastThemeDescription>\n              )}\n            </div>\n            {action}\n            <ToastThemeClose />\n          </ToastTheme>\n        );\n      })}\n      <ToastThemeViewport />\n    </ToastThemeProvider>\n  );\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}