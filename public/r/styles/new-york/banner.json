{
  "name": "banner",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/banner.tsx",
      "content": "import type { DetailedHTMLProps, HTMLAttributes } from \"react\";\nimport { forwardRef } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ntype BannerRootProps = DetailedHTMLProps<\n  HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n> & {\n  size?: string;\n  backgroundImage?: string;\n  backgroundColor?: string;\n  backgroundColorTop?: string;\n  backgroundColorBottom?: string;\n};\n\nconst BannerRoot = forwardRef<HTMLDivElement, BannerRootProps>(\n  (\n    {\n      className,\n      children,\n      size,\n      backgroundImage,\n      backgroundColor = \"rgba(0, 0, 0, 0.0)\",\n      backgroundColorTop = \"rgba(0, 0, 0, 0.0)\",\n      backgroundColorBottom = \"rgba(0, 0, 0, 0.0)\",\n      ...props\n    },\n    ref,\n  ) => (\n    <div\n      className={cn(\"min-h-[10vh]\", className)}\n      ref={ref}\n      style={size ? { height: `${size}vh` } : {}}\n      {...props}\n    >\n      <div\n        className=\"relative h-full overflow-hidden bg-cover bg-center bg-no-repeat\"\n        style={\n          backgroundImage\n            ? {\n                backgroundImage: `linear-gradient(${backgroundColorTop}, ${backgroundColorBottom}), url(${backgroundImage})`,\n              }\n            : {}\n        }\n      >\n        <div\n          className=\"absolute inset-0 flex size-full items-center justify-center overflow-hidden bg-fixed\"\n          style={{\n            backgroundColor,\n          }}\n        >\n          <div className=\"container mx-auto flex w-full max-w-screen-xl flex-col items-start gap-2 px-4\">\n            <div className=\"lg:flex-justify mx-auto my-10 mt-12 flex max-w-7xl flex-col gap-3 px-4 sm:px-6 lg:mx-0 lg:flex lg:flex-row lg:px-0\">\n              <div className=\"sm:text-center lg:text-left\">{children}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  ),\n);\nBannerRoot.displayName = \"BannerRoot\";\n\nconst BannerTitle = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLHeadingElement>\n>(({ className, children, ...props }, ref) => (\n  <h2\n    className={cn(\n      \"max-w-4xl text-5xl font-bold leading-[1.1] tracking-tight text-foreground sm:text-5xl md:text-6xl\",\n      className,\n    )}\n    ref={ref}\n    {...props}\n  >\n    <span className=\"block xl:inline\">{children}</span>\n  </h2>\n));\nBannerTitle.displayName = \"BannerTitle\";\n\nconst BannerSubtitle = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ children, className, ...props }, ref) => (\n  <div\n    className={cn(\n      \"mb-3 inline-flex items-center rounded-md bg-muted px-3 py-1 text-sm font-medium text-muted-foreground\",\n      className,\n    )}\n    ref={ref}\n    {...props}\n  >\n    {children}\n  </div>\n));\nBannerSubtitle.displayName = \"BannerSubtitle\";\n\nconst BannerDescription = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    className={cn(\n      \"mt-3 max-w-2xl text-lg text-muted-foreground sm:text-lg md:text-2xl\",\n      className,\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nBannerDescription.displayName = \"BannerDescription\";\n\nconst BannerActions = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    className={cn(\n      \"mt-5 space-y-4 sm:mt-8 sm:flex sm:justify-center sm:space-x-4 sm:space-y-0 lg:justify-start\",\n      className,\n    )}\n    ref={ref}\n    {...props}\n  />\n));\nBannerActions.displayName = \"BannerActions\";\n\nexport const Banner = {\n  Root: BannerRoot,\n  Subtitle: BannerSubtitle,\n  Title: BannerTitle,\n  Description: BannerDescription,\n  Actions: BannerActions,\n};\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}